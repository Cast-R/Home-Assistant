type: vertical-stack
cards:
  - type: custom:mod-card
    card_mod:
      style:
        hui-horizontal-stack-card $: |
          div#root > :first-child {
            width: 25%;
            flex: auto; 
          }
          div#root > :last-child {
            width: 75%;
            flex: auto; 
          }
    card:
      type: horizontal-stack
      cards:
        - type: vertical-stack
          cards:
            - show_name: false
              show_icon: true
              type: button
              tap_action:
                action: navigate
                navigation_path: /tablette-murale/0
              name: Accueil
              icon: mdi:home
              icon_height: 40px
            - type: vertical-stack
              cards:
                - type: custom:mushroom-entity-card
                  entity: sensor.pronote_ragneau_arthur
                  secondary_info: last-updated
                  icon: mdi:update
                  name: Derniere mise a jour pronote
                  icon_color: green
                  fill_container: true
            - type: custom:mushroom-entity-card
              entity: person.arthur
              fill_container: true
            - show_name: false
              show_icon: true
              type: button
              entity: input_select.pronote_select
              show_state: true
              icon_height: 40px
              icon: mdi:cast-education
              tap_action:
                action: call-service
                service: input_select.select_next
                target:
                  entity_id: input_select.pronote_select
                data:
                  cycle: true
        - type: horizontal-stack
          cards:
            - type: conditional
              conditions:
                - condition: state
                  entity: input_select.pronote_select
                  state: Agenda
              card:
                type: vertical-stack
                cards:
                  - type: markdown
                    content: >
                      <div>{% set items =
                      state_attr('sensor.pronote_ragneau_arthur_timetable_today','lessons')
                      %}📆 Emploi du temps du :
                      {{as_timestamp(items[0].start_at) | int
                      |timestamp_custom('%d/%m/%Y', true)}}</div> 
                        <table>   
                          {% for i in range(0,items | count, 1) %}  
                        <tr>  
                          {%- if items[i].canceled != True -%}  
                          <td width='12%'>
                            <mark>{{ items[i].start_time}}</mark>
                          </td>  
                          <td>
                            <mark>{{items[i].end_time }}</mark>
                          </td>
                          <td>{{ items[i].lesson }} {% else %}
                            <td>
                              <del>{{ items[i].start_time }}</del>
                            </td> 
                            <td>
                              <del>{{ items[i].end_time}}</del>
                            </td>
                            <td>
                              <del>{{ items[i].lesson }}</del>&emsp;{%- endif -%}{% if items[i].status!= None %} 
                              <br><span>{{ items[i].status }}</span>
                            </td> 
                              {% endif %} <td>
                          </tr> {% endfor %} 
                          </table> 
                    card_mod:
                      style:
                        .: |
                          ha-card ha-markdown {
                            padding:0px
                          }
                          ha-card ha-markdown.no-header {
                            padding:0px
                          }
                          ha-markdown {
                              max-height: 500px;
                              overflow-y: auto;
                              border-bottom-left-radius: 10px; 
                              border-bottom-right-radius: 10px;
                              border-top-left-radius: 10px; 
                              border-top-right-radius: 10px;
                            }
                        ha-markdown$: |
                          div {
                              background-color:rgb(54, 54, 54, 0.3);
                              padding: 5px 5px;
                              color:white;
                              font-weight:normal;
                              font-size:1.2em;
                              border-top-left-radius: 10px; 
                              border-top-right-radius: 10px; 
                              text-align: center;
                          }
                          table{
                            border-collapse: collapse;
                            font-size: 0.7em;
                            font-family: Roboto;
                            width: 100%;
                            outline: 0px solid #393c3d;
                            margin-top:5px
                          } caption {
                              font-weight: bold;
                              font-size: 1.2em;
                          } td {
                              padding: 5px 8px 5px 8px;
                              text-align: left;
                              border-bottom: 0px solid #1c2020;
                          }
                          tr {
                              border-bottom: 0px solid #1c2020;
                          }

                          tr:nth-of-type(even) {
                              background-color: rgb(54, 54, 54, 0.3);
                          }
                          tr:last-of-type {
                              border-bottom: transparent;          }
                          mark {
                              background: #00E199 ;
                              color: #222627;
                              border-radius: 5px;
                              padding: 5px;
                              border: solid #008d60 2px;
                          }
                          h1 {
                              background: white;
                              color: black;
                              border-radius: 5px;
                              padding: 5px;
                              font-size: 0.7em;
                              font-weight:normal;
                              text-align: center; 
                              border: solid #E5E2E1 2px;
                          }
                          class {
                              background: #00E199;
                              color: #222627;
                              border-radius: 10px;
                              padding: 5px;
                          }
                          span {
                              background: #EC4B34;
                              color: #222627;
                              border-radius: 5px;
                              padding: 5px;
                          }
                          tr:nth-child(n+2) > td:nth-child(2) {
                            text-align: left;
                          }
                  - type: markdown
                    content: >
                      <div>{% set items =
                      state_attr('sensor.pronote_ragneau_arthur_timetable_next_day','lessons')
                      %}📆 Emploi du temps du :
                      {{as_timestamp(items[0].start_at) | int
                      |timestamp_custom('%d/%m/%Y', true)}}</div> 
                        <table>   
                          {% for i in range(0,items | count, 1) %}  
                        <tr>  
                          {%- if items[i].canceled != True -%}  
                          <td width='12%'>
                            <mark>{{ items[i].start_time}}</mark>
                          </td>  
                          <td>
                            <mark>{{items[i].end_time }}</mark>
                          </td>
                          <td>{{ items[i].lesson }} {% else %}
                            <td>
                              <del>{{ items[i].start_time }}</del>
                            </td> 
                            <td>
                              <del>{{ items[i].end_time}}</del>
                            </td>
                            <td>
                              <del>{{ items[i].lesson }}</del>&emsp;{%- endif -%}{% if items[i].status!= None %} 
                              <br><span>{{ items[i].status }}</span>
                            </td> 
                              {% endif %} <td>
                          </tr> {% endfor %} 
                          </table> 
                    card_mod:
                      style:
                        .: |
                          ha-card ha-markdown {
                            padding:0px
                          }
                          ha-card ha-markdown.no-header {
                            padding:0px
                          }
                          ha-markdown {
                              max-height: 500px;
                              overflow-y: auto;
                              border-bottom-left-radius: 10px; 
                              border-bottom-right-radius: 10px;
                              border-top-left-radius: 10px; 
                              border-top-right-radius: 10px;
                            }
                        ha-markdown$: |
                          div {
                              background-color:rgb(54, 54, 54, 0.3);
                              padding: 5px 5px;
                              color:white;
                              font-weight:normal;
                              font-size:1.2em;
                              border-top-left-radius: 10px; 
                              border-top-right-radius: 10px; 
                              text-align: center;
                          }
                          table{
                            border-collapse: collapse;
                            font-size: 0.9em;
                            font-family: Roboto;
                            width: 100%;
                            outline: 0px solid #393c3d;
                            margin-top:5px
                          } caption {
                              font-weight: bold;
                              font-size: 1.2em;
                          } td {
                              padding: 5px 8px 5px 8px;
                              text-align: left;
                              border-bottom: 0px solid #1c2020;
                          }
                          tr {
                              border-bottom: 0px solid #1c2020;
                          }

                          tr:nth-of-type(even) {
                              background-color: rgb(54, 54, 54, 0.3);
                          }
                          tr:last-of-type {
                              border-bottom: transparent;          }
                          mark {
                              background: #00E199 ;
                              color: #222627;
                              border-radius: 5px;
                              padding: 5px;
                              border: solid #008d60 2px;
                          }
                          h1 {
                              background: white;
                              color: black;
                              border-radius: 5px;
                              padding: 5px;
                              font-size: 0.7em;
                              font-weight:normal;
                              text-align: center; 
                              border: solid #E5E2E1 2px;
                          }
                          class {
                              background: #00E199;
                              color: #222627;
                              border-radius: 10px;
                              padding: 5px;
                          }
                          span {
                              background: #EC4B34;
                              color: #222627;
                              border-radius: 5px;
                              padding: 5px;
                          }
                          tr:nth-child(n+2) > td:nth-child(2) {
                            text-align: left;
                          }
            - type: conditional
              conditions:
                - condition: state
                  entity: input_select.pronote_select
                  state: Notes
              card:
                type: vertical-stack
                cards:
                  - type: markdown
                    content: >-
                      <div>📝 Notes</div> <table> {% set items =
                      state_attr('sensor.pronote_ragneau_arthur_grades','grades')%}   
                      <tr> <td><h4>Date<h3></td> <td><h4>Cours</td> 
                      <td><h4>Note</td>  <td><h4></td> <td><h4>Class</td> 
                      <td><h4>Max</td>  <td><h4>Min</td> </tr>  {% for i in
                      range(0, items | count, 1) %}

                      <tr>     <td width='10%'><mark> {{
                      items[i].date.strftime("%d/%m") }} </td> <td width='40%'>
                      {{ items[i].subject }} </td>    <td width='10%'>{% if
                      items[i].grade == "Absent" %}Abs {% else %}{{
                      items[i].grade_out_of }} {% endif %}</td>   <td
                      width='10%'>  {% if items[i].grade == "Absent" %}❌ {% else
                      %} {% set note = items[i].grade | replace(',', '.') |
                      float %}  {% set div = items[i].out_of | replace(',', '.')
                      | float %}  {% set moyenne = note/div | replace(',', '.')
                      | float %}  {% if moyenne >= 0.75 %}🏆  {% elif moyenne >
                      0.6 %}📗   {% elif moyenne >= 0.5 %}📙   {% elif moyenne <
                      0.5  %}☠️   {% endif %}  {% endif %}

                      </td>  <td width='10%'> {{ items[i].class_average }}
                      </td>  <td width='10%'> {{ items[i].max }} </td>  <td
                      width='10%'> {{ items[i].min }} </td>  </td>  </tr> {%
                      endfor %}  </table>
                    card_mod:
                      style:
                        .: |
                          ha-card ha-markdown {
                            padding:0px
                          }
                          ha-card ha-markdown.no-header {
                            padding:0px
                          }
                          ha-markdown {
                              max-height: 600px;
                              overflow-y: auto;
                              border-bottom-left-radius: 10px; 
                              border-bottom-right-radius: 10px;
                              border-top-left-radius: 10px; 
                              border-top-right-radius: 10px;
                          }
                        ha-markdown$: |
                          div{
                              background-color: rgb(54, 54, 54, 0.3);
                              padding: 5px 5px;
                              color:white;
                              font-weight:normal;
                              text-align: center;
                              font-size:1.2em;
                              border-top-left-radius: 10px; 
                              border-top-right-radius: 10px; 
                              }
                          table{
                              border-collapse: collapse;
                              font-family: Roboto;
                              outline: 0px solid #393c3d;
                              font-size:0.9em;
                              width: 100%;
                              }
                          td {
                              padding: 5px 8px 5px 8px;
                              border-bottom: 0px solid #1c2020;
                              }
                          tr {
                              line-height: 25px;
                              margin-top:0px;
                              background-color:transparent;
                              }
                          tr:nth-of-type(even) {
                              background-color: rgb(54, 54, 54, 0.3);
                              }
                          tr:last-of-type {
                              border-bottom: transparent;
                              }
                          mark {
                              background: #009767;
                              color: #222627;
                              border-radius: 5px;
                              padding: 5px;
                              border: solid #005f41 2px;
                              }
                          span {
                              background: #EC4B34;
                              color: #222627;
                              border-radius: 10px;
                              padding: 5px;
                              }
                          span {
                              padding: 5px;
                              }
                          tr:nth-child(n+2) > td:nth-child(2) {
                            text-align: left;
                              }
                  - type: markdown
                    content: >-
                      <div>📝 Evaluations</div> <table> {% set items =
                      state_attr('sensor.pronote_ragneau_arthur_evaluations','evaluations')%} 
                      {% for i in range(0, items | count, 1) %} <tr> <td
                      width='20%'><mark> {{ items[i].date.strftime("%d/%m") }}
                      </td> <td width='60%'> {{ items[i].subject }} </td> <td
                      width='20%'>

                      {% set acquisitions = items[i].acquisitions %}

                      {% for j in range(0,acquisitions|count,1) %}{% if
                      acquisitions[j].level == 'Très bonne maîtrise' %}🏆 {%
                      elif acquisitions[j].level == 'Maîtrise satisfaisante'
                      %}📗{% elif acquisitions[j].level == 'Maîtrise fragile' 
                      %}📙{% elif acquisitions[j].level == 'Maîtrise
                      insuffisante'  %}☠️{% else %}?{% endif %}{% endfor %}

                      </td> </tr> {% endfor %}  </table>
                    card_mod:
                      style:
                        .: |
                          ha-card ha-markdown {
                            padding:0px
                          }
                          ha-card ha-markdown.no-header {
                            padding:0px
                          }
                          ha-markdown {
                              max-height: 600px;
                              overflow-y: auto;
                              border-bottom-left-radius: 10px; 
                              border-bottom-right-radius: 10px;
                              border-top-left-radius: 10px; 
                              border-top-right-radius: 10px;
                          }
                        ha-markdown$: |
                          div{
                              background-color: rgb(54, 54, 54, 0.3);
                              padding: 5px 5px;
                              color:white;
                              font-weight:normal;
                              text-align: center;
                              font-size:1.2em;
                              border-top-left-radius: 10px; 
                              border-top-right-radius: 10px; 
                              }
                          table{
                              border-collapse: collapse;
                              font-family: Roboto;
                              outline: 0px solid #393c3d;
                              font-size:0.9em;
                              width: 100%;
                              }
                          td {
                              padding: 5px 8px 5px 8px;
                              border-bottom: 0px solid #1c2020;
                              }
                          tr {
                              line-height: 4px;
                              margin-top:0px;
                              background-color:transparent;
                              }
                          tr:nth-of-type(even) {
                              background-color: rgb(54, 54, 54, 0.3);
                              }
                          tr:last-of-type {
                              border-bottom: transparent;
                              }
                          mark {
                              background: #009767;
                              color: #222627;
                              border-radius: 5px;
                              padding: 5px;
                              border: solid #005f41 2px;
                              }
                          span {
                              background: #EC4B34;
                              color: #222627;
                              border-radius: 10px;
                              padding: 5px;
                              }
                          span {
                              padding: 5px;
                              }
                          tr:nth-child(n+2) > td:nth-child(2) {
                            text-align: left;
                              }
            - type: conditional
              conditions:
                - condition: state
                  entity: input_select.pronote_select
                  state: Moyennes
              card:
                type: vertical-stack
                cards:
                  - type: markdown
                    content: >-
                      {% set items =
                      state_attr('sensor.pronote_ragneau_arthur_averages','averages')%} 


                      {% set div =
                      (states('sensor.pronote_ragneau_arthur_averages')) %} {%
                      set ns = namespace(sum=0) %} {% for i in range(0,
                      items|count, 1)
                       if items[i].average| replace(',', '.') | float %}
                      {% set ns.sum = (ns.sum + items[i].average| replace(',',
                      '.') | float) %}   {% endfor %} 


                      {% set moyenne_g = ns.sum/div| replace(',', '.') | float
                      %} 


                      <div>📝 {% if moyenne_g >= 15.0 %}🏆 {% elif moyenne_g >
                      12.0 %}📗 {% elif moyenne_g >= 10.0 %}📙 {% elif moyenne_g
                      < 10.0 %}☠️ {% endif %} Moyenne Générale {{moyenne_g
                      |round(2)}} {% if moyenne_g >= 15.0 %}🏆 {% elif moyenne_g
                      > 12.0 %}📗 {% elif moyenne_g >= 10.0 %}📙 {% elif
                      moyenne_g < 10.0 %}⚰️☠️ {% endif %} </div>




                      <table> {% set items =
                      state_attr('sensor.pronote_ragneau_arthur_averages','averages')%}   
                      <tr> <td><h4>Matière</td>  <td><h4>Note</td> 
                      <td><h4></td> <td><h4>Class</td>  <td><h4>Max</td> 
                      <td><h4>Min</td>  </tr>  {% for i in range(0, items |
                      count, 1) %}

                      <tr>     <td width='40%'> {{ items[i].subject }} </td> <td
                      width='10%'>{% if items[i].average == "Absent" %}❌{% else
                      %}{{ items[i].average }}{% endif %}</td>   <td
                      width='10%'>   {% set moyenne = items[i].average |
                      replace(',', '.') | float %} {% if moyenne >= 15.0 %}🏆 {%
                      elif moyenne > 12.0 %}📗 {% elif moyenne >= 10.0 %}📙 {%
                      elif moyenne < 10.0 %}⚰️☠️ {% endif %} </td>   <td
                      width='10%'> {{ items[i].class }} </td>  <td width='10%'>
                      {{ items[i].max }} </td>  <td width='10%'> {{ items[i].min
                      }} </td> </td>  </tr> {% endfor %}   </table>
                    card_mod:
                      style:
                        .: |
                          ha-card ha-markdown {
                            padding:0px
                          }
                          ha-card ha-markdown.no-header {
                            padding:0px
                          }
                          ha-markdown {
                              max-height: 455px;
                              overflow-y: auto;
                              border-bottom-left-radius: 10px; 
                              border-bottom-right-radius: 10px;
                              border-top-left-radius: 10px; 
                              border-top-right-radius: 10px;
                          }
                        ha-markdown$: |
                          div{
                              background-color: rgb(54, 54, 54, 0.3);
                              padding: 5px 5px;
                              color:white;
                              font-weight:normal;
                              text-align: center;
                              font-size:1.2em;
                              border-top-left-radius: 10px; 
                              border-top-right-radius: 10px; 
                              }
                          table{
                              border-collapse: collapse;
                              font-family: Roboto;
                              outline: 0px solid #393c3d;
                              font-size:0.9em;
                              width: 100%;
                              }
                          td {
                              padding: 5px 8px 5px 8px;
                              border-bottom: 0px solid #1c2020;
                              }
                          tr {
                              line-height: 25px;
                              margin-top:0px;
                              background-color:transparent;
                              }
                          tr:nth-of-type(even) {
                              background-color: rgb(54, 54, 54, 0.3);
                              }
                          tr:last-of-type {
                              border-bottom: transparent;
                              }
                          mark {
                              background: #009767;
                              color: #222627;
                              border-radius: 5px;
                              padding: 5px;
                              border: solid #005f41 2px;
                              }
                          span {
                              background: #EC4B34;
                              color: #222627;
                              border-radius: 10px;
                              padding: 5px;
                              }
                          span {
                              padding: 5px;
                              }
                          tr:nth-child(n+2) > td:nth-child(2) {
                            text-align: left;
                              }
